#!/bin/sh
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Check for git presence
if [[ $(pacman -T git) != "" ]]; then
	echo "You need git to run aurpkg.";
	echo "To install it run the following as root: pacman -S git";
	exit 1;
fi;

# Variables
initial_dir=$(pwd);
version=1.2.5;

aurpkg_help() {
	cat << EOF
usage: aurpkg [operation] <package>
operations:
    -h | --help			show this help
    -i | --info			search the info for a package
    -R | --remove <pkg>		remove a package
    -s | --search <query>	look for a package
    -S | --sync <pkg>		install a package
    -U | --update <pkg|ALL>	update a package
    -v | --version | --about	display version
EOF
};

aurpkg_version() {
	cat << EOF
    aurpkg v${version}
    Copyright (C) 2018 gstux
    Copyright (C) 2018-2019 Davide Garberi
    This program may be freely redistributed under
    the terms of the GNU General Public License.
    https://github.com/DD3Boh/aurpkg
EOF
};

aurpkg_install() {
	# export the first argument received by the function as PKG but make sure it contains no "/"
	if [[ ! -z $(echo ${1} | grep "\/") ]]; then
		PKG=$(echo ${1} | sed 's|.*/||')
	else
		PKG=${1}
	fi;

	# Check if the repo exists
	if [[ ! -z $(curl -s https://aur.archlinux.org/packages/$PKG | grep "404 - Page Not Found") ]]; then
		echo "Package '$PKG' not found in AUR repositories";
		if [[ ! -z $(pacman -Si $PKG) ]]; then
			sudo pacman -S $PKG;
		else
			echo "Package '$PKG' not found in official packages"
			echo "Try with 'aurpkg -s $PKG'"
		fi;
	else
		# Clone the package
		mkdir /tmp/build;
		git clone --depth=1 https://aur.archlinux.org/${PKG}.git /tmp/build/${PKG};

		# Choose if seeing the PKGBUILD
		echo "View the PKGBUILD? (Y/n)";
		read -s -n 1 REPLY0;
		if [[ $REPLY0 = "Y" ]] || [[ $REPLY0 = "y" ]] || [[ $REPLY0 = "" ]]; then
			# open the PKGBUILD with a text editor
			if [[ $EDITOR == "" ]]; then
				vi /tmp/build/${PKG}/PKGBUILD;
			else
				$EDITOR /tmp/build/${PKG}/PKGBUILD;
			fi;
		fi;
		# Choose to install or not
		echo "Continue? (Y/n)";
		read -s -n 1 REPLY1;
		if [[ $REPLY1 = "Y" ]] || [[ $REPLY1 = "y" ]] || [[ $REPLY1 = "" ]]; then
			# Install the AUR dependencies
			deps="$(source "/tmp/build/${PKG}/PKGBUILD" ; echo "${depends[@]}")"
			makedeps="$(source "/tmp/build/${PKG}/PKGBUILD" ; echo "${makedepends[@]}")"
			deps="$deps $makedeps"
			install_deps ${deps};

			# Build the package
			cd /tmp/build/${PKG};
			makepkg -s;
			echo "";
			# Install the package
			sudo pacman -U $(ls | grep '.pkg.tar.xz') --noconfirm;
			# Log the package
			if [[ $(grep -r ${PKG} ~/.aurpkg_list) == "" ]] && [[ $(pacman -T ${PKG}) == "" ]]; then
				echo ${PKG} >> ~/.aurpkg_list;
			fi;

			# Remove the build directory
			cd $initial_dir;
			rm -rf /tmp/build;
		else
			echo "Operation canceled";
		fi;
	fi;
};

install_deps() {
	while [[ $# -ge 1 ]]; do
		depPKG="${1}";
		aurpkg_deps;
	shift
	done
};

aurpkg_deps() {
	# Check if the package is already installed first
	if [[ -z $(pacman -T $depPKG) ]]; then
		echo "Dependency '$depPKG' already installed"
	else
		# Only install AUR packages, official packages can be handled by pacman itself
		if [[ -z $(pacman -Si $depPKG) ]]; then
			echo "Dependency '$depPKG' not found in official packages"
			echo "Retrying as AUR..."

			# Clone the repository
			git clone --depth=1 https://aur.archlinux.org/${depPKG}.git /tmp/build/${depPKG};
			cd /tmp/build/${depPKG};
			echo "Installing dependency '$depPKG' from AUR"

			# Choose if seeing the PKGBUILD
			echo "View the PKGBUILD? (Y/n)";
			read -s -n 1 REPLY0;
			if [[ $REPLY0 = "Y" ]] || [[ $REPLY0 = "y" ]] || [[ $REPLY0 = "" ]]; then
				# open the PKGBUILD with a text editor
				if [[ $EDITOR == "" ]]; then
				vi ./PKGBUILD;
				else
					$EDITOR ./PKGBUILD;
				fi;
			fi;

			# Build the package
			makepkg -s;
			echo "";
			# Install the package
			sudo pacman -U $(ls | grep '.pkg.tar.xz') --noconfirm;
			# Log the package
			if [[ $(grep -r ${depPKG} ~/.aurpkg_list) == "" ]] && [[ $(pacman -T ${depPKG}) == "" ]]; then
				echo ${depPKG} >> ~/.aurpkg_list;
			fi;

			# Remove the build directory
			cd $initial_dir;
		fi;
	fi;
};

aurpkg_uninstall() {
	# export the first argument received by the function as PKG
	PKG="${1}"
	# Uninstall the package
	sudo pacman -R $PKG;
	# Remove the package from the packages list
	if [[ $(pacman -T ${PKG}) == ${PKG} ]]; then
		sed -i /$PKG/d ~/.aurpkg_list;
	fi;
};

updating_function() {
	# Create the build directory
	mkdir /tmp/build;
	cd /tmp/build;
	# Clone the repository
	git clone --depth=1 https://aur.archlinux.org/${PKG}.git /tmp/build/${PKG};
	cd /tmp/build/${PKG};
	# Build the package
	makepkg -s;
	echo "";
	# Update the package
	sudo pacman -U $(ls | grep '.pkg.tar.xz') --noconfirm;
	# Remove the build directory
	cd $initial_dir;
	rm -rf /tmp/build;
};

aurpkg_full_update() {
	echo "Updating all the aur packages..."
	echo "The following packages are going to be updated:"
	cat ~/.aurpkg_list | tr "\n" " "
	echo ""
	echo "Do you want to update? (Y/n)"
	read -s -n 1 REPLY0;
	if [[ $REPLY0 = "Y" ]] || [[ $REPLY0 = "y" ]] || [[ $REPLY0 = "" ]]; then
		while read list; do
			aurpkg_update $list
		done < ~/.aurpkg_list
	else
		echo "Operation canceled"
	fi;
};

aurpkg_update() {
	# export the first argument received by the function as PKG
	PKG="${1}"
	# check the local package version
	local_package_version=$(pacman -Q $PKG | sed "s/$PKG //;s/..$//")
	# check the remote package version
	remote_package_version=$(curl -s https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=$PKG | grep pkgver= | sed 's/pkgver=//')
	if [[ ! -z $(echo $remote_package_version | grep '\$') ]]; then
		external_variable=$(echo $remote_package_version | sed 's|.*\$||g')
		prefix=$(echo $remote_package_version | sed 's|\$.*||g')
		external_version=$(curl -s https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=$PKG | grep $external_variable= | sed s/$external_variable=//g)
		old_package_version=$remote_package_version
		remote_package_version=$prefix$external_version
	fi;

	# If the package version is different update the package
	if [[ $remote_package_version != $local_package_version ]]; then
		updating_function;
	else
		echo "The package $PKG is already up to date";
	fi;
};

# Cleanup
aurpkg_cleanup() {
	# Temp folder cleanup
	rm -rf /tmp/build;

	# Create .aurpkg_list if not present
	if [[ ! -f ~/.aurpkg_list ]]; then
		touch ~/.aurpkg_list;
	fi;

	# List cleanup
	while read package; do
		if [[ $(pacman -T $package) == "$package" ]]; then
			sed -i /$package/d ~/.aurpkg_list;
		fi;
	done < ~/.aurpkg_list
};

aurpkg_search() {
	PKG=${1};
	# Search for keyword on AUR and list result

	# Total pages of list for the package searched
	total_pages=$(curl -s "https://aur.archlinux.org/packages/?K=$PKG&PP=250" | grep 'packages found' -m 1 | sed 's/.*packages found.*Page //;s/\..*//;s/.*of //')

	# The current page we are at
	current_page=$(curl -s "https://aur.archlinux.org/packages/?K=$PKG&PP=250" | grep 'packages found' -m 1 | sed 's/.*packages found.*Page //;s/\..*//;s/ of.*//')

	# Script to search for new pages in case there is any
	until [[ $current_page == $(($total_pages + 1)) ]]; do
		package_number=$(( ($current_page - 1) * 250))
		current_page=$((current_page + 1))
		curl -s -N "https://aur.archlinux.org/packages/?K=$PKG&PP=250&O=$package_number" | grep '<td><a href="/packages/\|<td class="wrap">' | sed 's|<td><a href=\"/packages/||;s|.*<td class="wrap">|    |;s|</.*||;s|.*>|aur/|g;'
	done

	# Also search in official packages
	pacman -Ss $PKG
}

aurpkg_info() {
	# export the first argument received by the function as PKG but make sure it contains no "/"
	if [[ ! -z $(echo ${1} | grep "\/") ]]; then
		PKG=$(echo ${1} | sed 's|.*/||')
	else
		PKG=${1}
	fi;

	if [[ ! -z $(curl -s https://aur.archlinux.org/packages/$PKG | grep "404 - Page Not Found") ]]; then
		pkg_info=$(pacman -Si $PKG | grep Description | sed 's/.*: //g')
	else
		pkg_info=$(curl -s https://aur.archlinux.org/packages/$PKG/ | grep "<th>Description" -A 1 | grep "</td>" | sed "s/<\/.*//;s/.*>//")
	fi;

	if [[ -z $pkg_info ]]; then
		echo "Invalid package!";
		echo "Use aurpkg -s <query> to search for packages";
	else
		echo "${1}"
		echo "    $pkg_info";
	fi;
};

aurpkg_functions() {
	operation=${1}
	if [[ -z $arguments ]]; then
		if [[ ! -z $(echo $operation | grep '\-h\|\--help\|\-v\|\--version\|\--about') ]]; then
			arguments="F";
		else
			echo "This command needs an argument"
			echo "Type aurpkg --help for a list of the commands"
			exit 1;
		fi;
	fi;

	for arg in $arguments; do
		case "$operation" in
			# Helping menu
			"-h" | "--help")
				aurpkg_help;;

			# Version infos
			"--version" | "--about" | "-v")
				aurpkg_version;;

			# Installing
			"-S" | "--sync" | "--install")
				aurpkg_install $arg;;

			# Uninstall/remove
			"-R" | "--remove" | "--uninstall")
				aurpkg_uninstall $arg;;

			# Update
			"-U" | "--update" | "--upgrade")
				[[ $arg == "ALL" ]] && aurpkg_full_update || aurpkg_update $arg;;

			# Search
			"-Ss" | "-s" | "--search")
				aurpkg_search $arg;;

			"-i" | "--info")
				aurpkg_info $arg;;

			# If no command matches
			*)
				echo "Invalid command";
				echo "Type aurpkg --help for a list of the commands"
				exit 1;;
		esac
	done
};

# Cleanup first
aurpkg_cleanup

if [[ ! -z $@ ]]; then
	totalwords=$(echo $* | wc -w)
	for input in $@; do
		if [[ "${input}" = -* ]] || [[ "${input}" = --* ]] && [[ -z "${command}" ]]; then
			command="$input"
		elif [[ "${input}" != -* ]] && [[ "${input}" != --* ]]; then
			arguments="$arguments $input"
		elif [[ "${input}" = -* ]] || [[ "${input}" = --* ]] && [[ ! -z "${command}" ]]; then
			aurpkg_functions $command
			unset command arguments;
			command=$input;
		fi;

		# Check if the last argument passed to aurpkg matches the current input
		if [[ ${!totalwords} == $input ]]; then
			aurpkg_functions $command
		fi;
	done
else
		echo "Command not provided";
		echo "Type aurpkg --help for a list of the commands"
fi;

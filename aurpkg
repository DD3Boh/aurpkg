#!/bin/sh
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Variables
initial_dir=$(pwd)
version=1.3.0;

aurpkg_help() {
	cat << EOF
usage: aurpkg [operation] <package>
operations:
    -h | --help			show this help
    -i | --info			search the info for a package
    -R | --remove <pkg>		remove a package
    -s | --search <query>	look for a package
    -S | --sync <pkg>		install a package
    -U | --update <pkg|ALL>	update a package
    -v | --version | --about	display version
EOF
}

aurpkg_version() {
	cat << EOF
    aurpkg v${version}
    Copyright (C) 2018 gstux
    Copyright (C) 2018-2019 Davide Garberi
    This program may be freely redistributed under
    the terms of the GNU General Public License.
    https://github.com/DD3Boh/aurpkg
EOF
}

aurpkg_install() {
	# export the first argument received by the function as PKG but make sure it contains no "/"
	PKG=$(echo ${1} | sed "s|.*/||")

	# Check if the repo exists
	if [[ ! $(curl -s https://aur.archlinux.org/packages/$PKG --fail) ]]; then
		echo "Package '$PKG' not found in AUR repositories"
		if [[ -n $(pacman -Si $PKG) ]]; then
			sudo pacman -S $PKG
		else
			echo "Package '$PKG' not found in official packages"
			echo "Try with 'aurpkg -s $PKG'"
		fi
	else
		# Clone the package
		ogPKG=$PKG
		PKG=$(curl -s https://aur.archlinux.org/packages/${PKG} | grep -m 1 /pkgbase/ | sed 's|.*pkgbase/||;s|/.*||')
		git clone --depth=1 https://aur.archlinux.org/${PKG}.git /tmp/aurpkg/${PKG}

		# Choose if seeing the PKGBUILD
		echo "View the PKGBUILD? (Y/n)"
		read -s -n 1 REPLY0
		if [[ $REPLY0 = "Y" ]] || [[ $REPLY0 = "y" ]] || [[ $REPLY0 = "" ]]; then
			# open the PKGBUILD with a text editor
			if [[ $EDITOR == "" ]]; then
				vi /tmp/aurpkg/${PKG}/PKGBUILD
			else
				$EDITOR /tmp/aurpkg/${PKG}/PKGBUILD
			fi
		fi
		# Choose to install or not
		echo "Continue? (Y/n)"
		read -s -n 1 REPLY1
		if [[ $REPLY1 = "Y" ]] || [[ $REPLY1 = "y" ]] || [[ $REPLY1 = "" ]]; then
			# Install the AUR dependencies
			deps="$(source "/tmp/aurpkg/${PKG}/PKGBUILD" &> /dev/null; echo "${depends[@]}"; echo "${makedepends[@]}")"
			install_deps ${deps}

			# Build the package
			cd /tmp/aurpkg/${PKG}
			if [[ $chroot == true ]]; then
				chrootcommand="makechrootpkg -c -r $CHROOT"
				if [[ ! -z $(ls /tmp/aurpkg/chrootdeps/pkgs) ]]; then
					for dep in $(ls -d /tmp/aurpkg/chrootdeps/pkgs/*); do
						chrootcommand="$chrootcommand -I $dep"
					done
				fi
				$chrootcommand
			else
				makepkg -s
			fi;
			echo ""
			# Install the package
			if [[ ! -z $(ls | grep ".pkg.tar.xz") ]]; then
				sudo pacman -U $(ls | grep -m 1 "$ogPKG.*.pkg.tar.xz")
			else
				echo "Package compilation failed!"
			fi

			# Log the package
			if [[ -z $(echo $PKG | grep "\-git") ]]; then
				pkgline="${ogPKG} ($(source "/tmp/aurpkg/${PKG}/PKGBUILD" &> /dev/null; echo "${pkgver[@]}"))"
			else
				repo=$(cat /tmp/aurpkg/${PKG}/.SRCINFO | grep -m1 'source =' | sed 's|.*//|https://|')
				pkgline="${ogPKG} ($(git ls-remote $repo HEAD | cut -c1-8))"
			fi;

			if [[ $(pacman -T ${ogPKG}) == "" ]]; then
				sed -i /$ogPKG.*/d ~/.aurpkg_list
				echo ${pkgline} >> ~/.aurpkg_list
			fi;

			# Remove the build directory
			cd $initial_dir
			rm -rf /tmp/aurpkg
		else
			echo "Operation canceled"
		fi
	fi
}

install_deps() {
	while [[ $# -ge 1 ]]; do
		depPKG="${1}"
		aurpkg_deps
		[[ $chroot == true ]] && aurpkg_deps_chroot
	shift
	done
}

aurpkg_deps_chroot() {
	if [[ ! -d /tmp/aurpkg/chrootdeps/pkgs ]]; then
		mkdir -p /tmp/aurpkg/chrootdeps/pkgs
	fi;

	# Only install AUR packages, official packages can be handled by pacman itself
	if [[ -z $(pacman -Si $depPKG) ]]; then
		# Clone the repository
		git clone --depth=1 https://aur.archlinux.org/${depPKG}.git /tmp/aurpkg/chrootdeps/${depPKG}
		cd /tmp/aurpkg/chrootdeps/${depPKG}
		makepkg -s
		cp *.pkg.tar.xz /tmp/aurpkg/chrootdeps/pkgs/
		cd $initial_dir
	fi;
}

aurpkg_deps() {
	# Check if the package is already installed first
	if [[ -z $(pacman -T $depPKG) ]]; then
		echo "Dependency '$depPKG' already installed"
	else
		# Only install AUR packages, official packages can be handled by pacman itself
		if [[ -z $(pacman -Si $depPKG) ]]; then
			echo "Dependency '$depPKG' not found in official packages"
			echo "Retrying as AUR..."

			# Clone the repository
			ogdepPKG=$depPKG
			depPKG=$(curl -s https://aur.archlinux.org/packages/${depPKG} | grep -m 1 /pkgbase/ | sed 's|.*pkgbase/||;s|/.*||')
			git clone --depth=1 https://aur.archlinux.org/${depPKG}.git /tmp/aurpkg/${depPKG}
			cd /tmp/aurpkg/${depPKG}
			echo "Installing dependency '$depPKG' from AUR"

			# Choose if seeing the PKGBUILD
			echo "View the PKGBUILD? (Y/n)"
			read -s -n 1 REPLY0
			if [[ $REPLY0 = "Y" ]] || [[ $REPLY0 = "y" ]] || [[ $REPLY0 = "" ]]; then
				# open the PKGBUILD with a text editor
				if [[ $EDITOR == "" ]]; then
				vi ./PKGBUILD
				else
					$EDITOR ./PKGBUILD
				fi
			fi

			# Build the package
			makepkg -s
			echo ""
			# Install the package
			if [[ ! -z $(ls | grep ".pkg.tar.xz") ]]; then
				sudo pacman -U $(ls | grep -c 1 "$ogdepPKG.*.pkg.tar.xz") --noconfirm
			else
				echo "Package compilation failed!"
			fi

			# Log the package
			if [[ -z $(echo $depPKG | grep "\-git") ]]; then
				pkgline="${ogdepPKG} ($(source "/tmp/aurpkg/${depPKG}/PKGBUILD" &> /dev/null; echo "${pkgver[@]}"))"
			else
				repo=$(cat /tmp/aurpkg/${depPKG}/.SRCINFO | grep -m1 'source =' | sed 's|.*//|https://|')
				pkgline="${ogdepPKG} ($(git ls-remote $repo HEAD | cut -c1-8))"
			fi

			if [[ $(pacman -T ${ogdepPKG}) == "" ]]; then
				sed -i /$ogdepPKG.*/d ~/.aurpkg_list
				echo ${pkgline} >> ~/.aurpkg_list
			fi

			# Remove the build directory
			cd $initial_dir
		fi
	fi
}

aurpkg_uninstall() {
	# export the first argument received by the function as PKG
	PKG=$(echo "${1}" | sed "s|.*/||g")
	# Uninstall the package
	sudo pacman -R $PKG
	# Remove the package from the packages list
	if [[ $(pacman -T ${PKG}) == ${PKG} ]]; then
		sed -i /$PKG.*/d ~/.aurpkg_list
	fi
}

updating_function() {
	# Clone the repository
	pkgline="$PKG ($remote_package_version)"
	cd /tmp/aurpkg/${PKG}
	# Build the package
	makepkg -s
	echo ""
	# Update the package
	if [[ ! -z $(ls | grep ".pkg.tar.xz") ]]; then
		sudo pacman -U $(ls | grep ".pkg.tar.xz") --noconfirm
		# Update version entry in PKG list
		sed -i /$PKG.*/d ~/.aurpkg_list
		echo ${pkgline} >> ~/.aurpkg_list
	else
		echo "Package compilation failed!"
	fi
	# Remove the build directory
	cd $initial_dir
	rm -rf /tmp/aurpkg
}

aurpkg_full_update() {
	echo "Updating all the aur packages..."
	echo "The following packages are going to be updated:"
	cat ~/.aurpkg_list | sed 's/ (.*)//g' | tr "\n" " "
	echo ""
	echo "Do you want to update? (Y/n)"
	read -s -n 1 REPLY0
	if [[ $REPLY0 = "Y" ]] || [[ $REPLY0 = "y" ]] || [[ $REPLY0 = "" ]]; then
		while read list; do
			aurpkg_update $(echo $list | sed "s/(.*)//g")
		done < ~/.aurpkg_list
	else
		echo "Operation canceled"
	fi
}

aurpkg_update() {
	# export the first argument received by the function as PKG
	PKG="${1}"
	# check the local package version
	local_package_version=$(grep $PKG ~/.aurpkg_list | sed "s/.*(//;s/)//")

	ogPKG=$PKG
	PKG=$(curl -s https://aur.archlinux.org/packages/${PKG} | grep -m 1 /pkgbase/ | sed 's|.*pkgbase/||;s|/.*||')
	git clone -q --depth=1 https://aur.archlinux.org/${PKG}.git /tmp/aurpkg/${PKG}

	# check the remote package version
	if [[ -z $(echo $ogPKG | grep "\-git") ]]; then
		remote_package_version=$(source /tmp/aurpkg/${PKG}/PKGBUILD &> /dev/null; echo "${pkgver[@]}")
	else
		repo=$(cat /tmp/aurpkg/${PKG}/.SRCINFO | grep -m1 'source =' | sed 's|.*//|https://|')
		remote_package_version=$(git ls-remote $repo HEAD | cut -c1-8)
	fi

	# If the package version is different update the package
	if [[ $remote_package_version != $local_package_version ]]; then
		updating_function
	else
		echo "The package $ogPKG is already up to date"
		rm -rf /tmp/aurpkg
	fi
}

# Cleanup
aurpkg_cleanup() {
	# Temp folder cleanup
	rm -rf /tmp/aurpkg

	# Create .aurpkg_list if not present
	if [[ ! -f ~/.aurpkg_list ]]; then
		touch ~/.aurpkg_list
	fi;

	# List cleanup
	for package in $(cat ~/.aurpkg_list | sed 's|(.*)||g'); do
		if [[ $(pacman -T $package) == "$package" ]]; then
			sed -i /$package.*/d ~/.aurpkg_list
		fi
	done
}

aurpkg_search() {
	# Search for keyword on AUR and list result

	PKG="${1}"
	# Total pages of list for the package searched
	total_pages=$(curl -s "https://aur.archlinux.org/packages/?K=$PKG&PP=250" | grep "packages found" -m 1 | sed "s/.*packages found.*Page //;s/\..*//;s/.*of //")

	# The current page we are at
	current_page=$(curl -s "https://aur.archlinux.org/packages/?K=$PKG&PP=250" | grep 'packages found' -m 1 | sed 's/.*packages found.*Page //;s/\..*//;s/ of.*//')

	# Script to search for new pages in case there is any
	until [[ $current_page == $(($total_pages + 1)) ]]; do
		package_number=$(( ($current_page - 1) * 250))
		current_page=$((current_page + 1))
		curl -s -N "https://aur.archlinux.org/packages/?K=$PKG&PP=250&O=$package_number" | grep '<td><a href="/packages/\|<td class="wrap">' | sed 's|<td><a href=\"/packages/||;s|.*<td class="wrap">|    |;s|</.*||;s|.*>|aur/|g;'
	done

	# Also search in official packages
	pacman -Ss $PKG
}

aurpkg_info() {
	# export the first argument received by the function as PKG but make sure it contains no "/"
	PKG=$(echo ${1} | sed "s|.*/||")

	if [[ ! -z $(curl -s https://aur.archlinux.org/packages/$PKG | grep "404 - Page Not Found") ]]; then
		pkg_info=$(pacman -Si $PKG | grep Description | sed "s/.*: //g")
	else
		pkg_info=$(curl -s https://aur.archlinux.org/packages/$PKG/ | grep "<th>Description" -A 1 | grep "</td>" | sed "s/<\/.*//;s/.*>//")
	fi

	if [[ -z $pkg_info ]]; then
		echo "Invalid package!"
		echo "Use aurpkg -s <query> to search for packages"
	else
		echo "${1}"
		echo "    $pkg_info"
	fi
}

aurpkg_chroot_setup() {
	# Chroot
	CHROOT=~/.aurpkg/chroot
	if [[ ! -d ~/.aurpkg/chroot ]]; then
		mkdir -p ~/.aurpkg/chroot
		mkarchroot $CHROOT/root base-devel
	else
		arch-nspawn $CHROOT/root pacman -Syu
	fi
}

aurpkg_functions() {
	operation=${1}

	if [[ -z $arguments ]]; then
		case "$operation" in
			# Helping menu
			"h" | "help")
				aurpkg_help;;

			# Version infos
			"version" | "about" | "v")
				aurpkg_version;;

			"c" | "chroot")
				aurpkg_chroot_setup
				chroot=true;;

			*)
			echo "This command needs an argument"
			echo "Type aurpkg --help for a list of the commands"
			exit 1;;
		esac
	else
		for arg in "$arguments"; do
			case "$operation" in

				# Installing
				"S" | "sync" | "install")
					aurpkg_install $arg;;

				# Uninstall/remove
				"R" | "remove" | "uninstall")
					aurpkg_uninstall $arg;;

				# Update
				"U" | "update" | "upgrade")
					[[ $arg == "ALL" ]] && aurpkg_full_update || aurpkg_update $arg;;

				# Search
				"Ss" | "s" | "search")
					aurpkg_search "$arg";;

				"i" | "info")
					aurpkg_info $arg;;

				# If no command matches
				*)
					echo "Invalid command"
					echo "Type aurpkg --help for a list of the commands"
					exit 1;;
			esac
		done
	fi
}

# Cleanup first
aurpkg_cleanup&

if [[ ! -z $@ ]]; then
	for input in "$@"; do
		case "$input" in

			-* | --*)
				if [[ -z "${command}" ]]; then
					command="$(echo $input | sed "s|-||g")"
				else
					aurpkg_functions $command
					unset arguments
					command="$(echo $input | sed "s|-||g")"
				fi;;

			*)
				if [[ -z "${arguments}" ]]; then
					arguments="$input"
				else
					aurpkg_functions $command
					arguments="$input"
				fi;;
		esac
	done
	aurpkg_functions $command
else
		echo "Command not provided"
		echo "Type aurpkg --help for a list of the commands"
fi;

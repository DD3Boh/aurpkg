# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# Check for git presence
if [[ $(pacman -T git) != "" ]]; then
	echo "You need git to run aurpkg.";
	echo "To install it run the following as root: pacman -S git";
	exit 1;
fi;

# Variables
initial_dir=$(pwd);
version=1.2.1;

# Functions

aurpkg_help() {
	echo "usage: aurpkg [operation] <package>"
	echo "operations:";
	echo "    -h | --help			show this help";
	echo "    -i | --info			search the info for a package";
	echo "    -R | --remove <pkg>		remove a package";
	echo "    -s | --search <query>	look for a package";
	echo "    -S | --sync <pkg>		install a package";
	echo "    -U | --update <pkg>		update a package";
	echo "    -v | --version | --about	display version";
};

aurpkg_version() {
    echo "    aurpkg v${version}";
    echo "    Copyright (C) 2018 gstux";
    echo "    Copyright (C) 2018-2019 Davide Garberi";
    echo "";
    echo "    This program may be freely redistributed under";
    echo "    the terms of the GNU General Public License.";
    echo "";
    echo "    https://github.com/DD3Boh/aurpkg";
};

aurpkg_install() {
	# Clean the old build directory if present
	rm -rf /tmp/build;
	# Create the build directory
	mkdir /tmp/build;
	cd /tmp/build;
	# Clone the repository
	git clone https://aur.archlinux.org/${PKG}.git /tmp/build/${PKG};
	# Try with pacman if the AUR repo is empty
	if [[ $(ls /tmp/build/$PKG) == "" ]]; then
		echo "$PKG not found in AUR repositories, trying as official package";
		sudo pacman -S $PKG;
		rm -rf /tmp/build;
		exit 1;
	else
		cd /tmp/build/${PKG};

		# Choose if seeing the PKGBUILD
		echo "View the PKGBUILD? (Y/n)";
		read -s -n 1 REPLY0;
		if [[ $REPLY0 = "Y" ]] || [[ $REPLY0 = "y" ]] || [[ $REPLY0 = "" ]]; then
			# open the PKGBUILD with a text editor
			if [[ $EDITOR == "" ]]; then
				vi ./PKGBUILD;
			else
				$EDITOR ./PKGBUILD;
			fi;
		fi;
		# Choose to install or not
		echo "Continue? (Y/n)";
		read -s -n 1 REPLY1;
		if [[ $REPLY1 = "Y" ]] || [[ $REPLY1 = "y" ]] || [[ $REPLY1 = "" ]]; then
			# Build the package
			makepkg -s;
			echo "";
			# Install the package
			sudo pacman -U $(ls | grep '.tar.xz') --noconfirm;
			# Log the package
			if [[ ! -f ~/.aurpkg_list ]]; then
				touch ~/.aurpkg_list;
			fi;
			if [[ $(grep -r ${PKG} ~/.aurpkg_list) == "" ]]; then
				echo ${PKG} >> ~/.aurpkg_list;
			fi;
		else
			echo "Operation canceled";
		fi;
	fi;
	# Remove the build directory
	cd $initial_dir;
	rm -rf /tmp/build;
};

aurpkg_uninstall() {
	# Uninstall the package
	sudo pacman -R $PKG;
	# Remove the package from the packages list
	sed -i /$PKG/d ~/.aurpkg_list;
};

updating_function() {
	# Create the build directory
	mkdir /tmp/build;
	cd /tmp/build;
	# Clone the repository
	git clone https://aur.archlinux.org/${PKG}.git /tmp/build/${PKG};
	cd /tmp/build/${PKG};
	# Build the package
	makepkg -s;
	echo "";
	# Update the package
	sudo pacman -U $(ls | grep '.tar.xz') --noconfirm;
	# Remove the build directory
	cd $initial_dir;
	rm -rf /tmp/build;
};

aurpkg_update() {
	# check the local package version
	local_package_version=$(pacman -Q $PKG | sed "s/$PKG //" | sed 's/-1//')
	# check the remote package version
	remote_package_version=$(curl -s https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=$PKG | grep pkgver= | sed 's/pkgver=//')
	# Check if the versions are the same, if not check the git package
	if [[ $remote_package_version != $local_package_version ]]; then
		remote_package_version=$(curl -s https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=$PKG\-git | grep pkgver= | sed 's/pkgver=//')
	fi;
	# If the package version is different update the package
	if [[ $remote_package_version != $local_package_version ]]; then
		updating_function;
	else
		echo "The package $PKG is already up to date";
	fi;
};

aurpkg_search() {
	# Search for keyword on AUR and list result

	# Total pages of list for the package searched
	total_pages=$(wget -q -O - "https://aur.archlinux.org/packages/?O=0&SeB=nd&K=$PKG&outdated=&SB=n&SO=a&PP=250&do_Search=Go" | grep 'packages found' -m 1 | sed 's/.*packages found.*Page //' | sed 's/\..*//' | sed 's/.*of //')

	# The current page we are at
	current_page=$(wget -q -O - "https://aur.archlinux.org/packages/?O=0&SeB=nd&K=$PKG&outdated=&SB=n&SO=a&PP=250&do_Search=Go" | grep 'packages found' -m 1 | sed 's/.*packages found.*Page //' | sed 's/\..*//' | sed 's/ of.*//')

	# Script to search for new pages in case there is any
	until [ $current_page == $(($total_pages + 1)) ]; do
		current_page_old=$current_page
		package_number=$(( ($current_page - 1) * 250))
		current_page=$((current_page_old + 1))
		wget -q -O - "https://aur.archlinux.org/packages/?O=$package_number&SeB=nd&K=$PKG&outdated=&SB=n&SO=a&PP=250&do_Search=Go" | grep '<td><a href="/packages/' | sed 's/<td><a href=\"\/packages//'| sed -n 's/\//&\n/;s/.*\n//p' | sed 's/\/.*//'
	done
}

aurpkg_info() {
	pkg_info=$(wget -q -O - https://aur.archlinux.org/packages/$PKG/ | grep "<th>Description" -A 1 | grep "</td>" | sed "s/<\/.*//" | sed 's/.*>//')
	echo $pkg_info;
};

# The scripty part
if [[ ${1} != "" ]]; then
	while [[ $# -ge 1 ]]; do
		case "${1}" in

			# Helping menu
			"-h" | "--help")
			shift
				aurpkg_help;;
				
			# Version infos
			"--version" | "--about" | "-v")
			shift
				aurpkg_version;;

			# Installing
			"-S" | "--sync" | "--install")
			shift
				if [[ ${1} == "" ]]; then
					echo "Fatal: No package specified";
					exit 1;
				else
					while [[ $# -ge 1 ]]; do
						PKG="${1}";
						aurpkg_install;
					shift
					done
				fi;;

			# Uninstall/remove
			"-R" | "--remove" | "--uninstall")
			shift

				if [[ ${1} == "" ]]; then
					echo "Fatal: No package specified";
					exit 1;
				else
					while [[ $# -ge 1 ]]; do
						PKG="${1}";
						aurpkg_uninstall;
					shift
					done
				fi;;

			# Update
			"-U" | "--update" | "--upgrade")
			shift

				if [[ ${1} == "" ]]; then
					echo "Fatal: No package specified";
					exit 1;
				else
					while [[ $# -ge 1 ]]; do
						PKG="${1}";
						aurpkg_update;
					shift
					done
				fi;;
				
			# Search
			"-Ss" | "-s" | "--search")
			shift
			
				if [[ ${1} == "" ]]; then
					echo "No query specified";
					exit 1;
				else
					PKG=${1};
					aurpkg_search;
				fi;;

			"-i" | "--info")
			shift
				if [[ ${1} == "" ]]; then
					echo "Fatal: No package specified";
					exit 1;
				else
					while [[ $# -ge 1 ]]; do
						PKG="${1}";
						aurpkg_info;
					shift
					done
				fi;;

			# If no command matches
			*)
				echo "Invalid command";
				echo "Type aurpkg --help for a list of the commands";;
		esac
	shift
	done
else
	echo "Invalid command";
	echo "Type aurpkg --help for a list of the commands";
fi;
